/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontend;

import backend.BlockHandler;
import backend.ContentDatabase;
import backend.FriendsManager;
import backend.RequestHandler;
import backend.User;
import backend.UserDatabase;
import java.awt.Image;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Youss
 */
public class FriendManagerGUI extends Window {

    /**
     * Creates new form FriendManager
     */
    private Window prevPage;

    public void setPrevPage(Window prevPage) {
        this.prevPage = prevPage;
    }

    private UserDatabase userDatabase = UserDatabase.getInstance();

    private FriendsManager friendsManager = new FriendsManager();
    private RequestHandler requestHandler = new RequestHandler(friendsManager);
    private BlockHandler blockHandler = new BlockHandler(friendsManager);
    private List<User> allUsers;
    private User user;
    private HashMap<User, String> comboBoxMap;
    private int listIndicator;
    User selectedUser = null;

    public FriendManagerGUI(User user, List<User> allUsers) {
        this.listIndicator = 0;
        this.setVisible(true);
        this.comboBoxMap = new HashMap<>();
        initComponents();
        prepare("Friends Manager");
        this.user = user;
        this.allUsers = allUsers;
        updateComboBox(friendsManager.getFriendsConverted().get(user));
        this.addButton.setVisible(false);
        this.acceptButton.setVisible(false);
        this.declineButton.setVisible(false);
        this.unFriendButton.setVisible(true);
        this.blockButton.setVisible(true);

        this.searchBar.setVisible(false);
        this.jScrollPane1.setVisible(false);
        this.jComboBox1.setVisible(true);
        this.status.setVisible(true);
        this.jLabel3.setVisible(true);
        this.SelectedUserTxt.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        profilePic = new javax.swing.JLabel();
        requestsButton = new javax.swing.JButton();
        status = new javax.swing.JLabel();
        searchBar = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        blockButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        acceptButton = new javax.swing.JButton();
        declineButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        unFriendButton = new javax.swing.JButton();
        friendsButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();
        suggestionsButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        SearchOutput = new javax.swing.JList<>();
        Back = new javax.swing.JButton();
        SelectedUserTxt = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        requestsButton.setText("Requests");
        requestsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestsButtonActionPerformed(evt);
            }
        });

        status.setText("status");

        searchBar.setText("Search");
        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });
        searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchBarKeyReleased(evt);
            }
        });

        jLabel3.setText("Select User");

        blockButton.setText("Block");
        blockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        acceptButton.setText("Accept");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        declineButton.setText("Decline");
        declineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineButtonActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        unFriendButton.setText("UnFriend");
        unFriendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unFriendButtonActionPerformed(evt);
            }
        });

        friendsButton.setText("Friends");
        friendsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                friendsButtonActionPerformed(evt);
            }
        });

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        suggestionsButton.setText("Suggestions");
        suggestionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suggestionsButtonActionPerformed(evt);
            }
        });

        SearchOutput.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        SearchOutput.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                SearchOutputValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(SearchOutput);

        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        SelectedUserTxt.setText("Selected User: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(friendsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(suggestionsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(requestsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchButton)
                        .addGap(90, 90, 90))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SelectedUserTxt))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(blockButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(acceptButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(declineButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(unFriendButton))
                        .addComponent(addButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(profilePic, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(profilePic, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(acceptButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(declineButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unFriendButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blockButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(friendsButton)
                            .addComponent(suggestionsButton)
                            .addComponent(requestsButton)
                            .addComponent(SearchButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(status))
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SelectedUserTxt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(98, 98, 98)
                        .addComponent(Back)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void friendsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_friendsButtonActionPerformed
        this.listIndicator = 0; // indicator that we're at friends list
        List<User> friends = friendsManager.getFriendsConverted().get(user);
        this.SelectedUserTxt.setVisible(false);
        this.searchBar.setVisible(false);
        this.jComboBox1.setVisible(true);
        this.status.setVisible(true);
        this.jLabel3.setVisible(true);
        this.jScrollPane1.setVisible(false);
        if (listIndicator != 99) {
            updateComboBox(friends);
        }
        this.addButton.setVisible(false);
        this.acceptButton.setVisible(false);
        this.declineButton.setVisible(false);
        this.unFriendButton.setVisible(true);
        this.blockButton.setVisible(true);

    }//GEN-LAST:event_friendsButtonActionPerformed

    private void requestsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestsButtonActionPerformed
        this.listIndicator = 1; // indicator that we're at requests list
        List<User> requests = friendsManager.getReceivedRequestsConverted().get(user);
        this.SelectedUserTxt.setVisible(false);

        this.searchBar.setVisible(false);
        this.jComboBox1.setVisible(true);
        this.status.setVisible(true);
        this.jLabel3.setVisible(true);
        this.jScrollPane1.setVisible(false);
//        System.out.println(requests);
        if (listIndicator != 99) {
            updateComboBox(requests);
        }
        this.addButton.setVisible(false);
        this.acceptButton.setVisible(true);
        this.declineButton.setVisible(true);
        this.unFriendButton.setVisible(false);
        this.blockButton.setVisible(true);

    }//GEN-LAST:event_requestsButtonActionPerformed

    private void blockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockButtonActionPerformed
        if (jComboBox1.getItemCount() != 0 || (listIndicator == 99 && SearchOutput.getModel().getSize() > 0)) {
            blockHandler.blockUser(user, getSelectedUser());
            if (listIndicator != 99) {
                updateComboBox(ListAccordingToIndicator(listIndicator));
            }
        } else {
            JOptionPane.showMessageDialog(this, "No Users in List", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_blockButtonActionPerformed

    private void suggestionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suggestionsButtonActionPerformed
        this.listIndicator = 2; // indicator that we're at suggestions list
        List<User> suggestions = friendsManager.friendSuggestions(user, allUsers);
        this.SelectedUserTxt.setVisible(false);

        this.searchBar.setVisible(false);
        this.jScrollPane1.setVisible(false);
        this.jComboBox1.setVisible(true);
        this.status.setVisible(true);
        this.jLabel3.setVisible(true);
        if (listIndicator != 99) {
            updateComboBox(suggestions);
        }
        this.addButton.setVisible(true);
        this.acceptButton.setVisible(false);
        this.declineButton.setVisible(false);
        this.unFriendButton.setVisible(false);
        this.blockButton.setVisible(true);

    }//GEN-LAST:event_suggestionsButtonActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (listIndicator != 99) {
            selectedUser = getSelectedUser();
        }
        profilePic.setIcon(null);  // Clear the profile picture
        status.setText("");        // Clear the status text
        if (selectedUser != null) {
            String profilePhotoPath = selectedUser.getProfilePhotoPath();
            ImageIcon originalIcon = new ImageIcon(profilePhotoPath);
            Image scaledImage = originalIcon.getImage().getScaledInstance(profilePic.getWidth(), profilePic.getHeight(), Image.SCALE_SMOOTH);
            profilePic.setIcon(new ImageIcon(scaledImage));
            status.setText(selectedUser.getStatus());
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (jComboBox1.getItemCount() > 0 || (listIndicator == 99 && SearchOutput.getModel().getSize() > 0)) {
            if (listIndicator != 99) {
                selectedUser = getSelectedUser();
            }
//            System.out.println(selectedUser.getUsername());
//            System.out.println("test");
            if (selectedUser != null) {
                boolean success = requestHandler.sendFriendRequest(user, selectedUser);
                if (success) {
                    JOptionPane.showMessageDialog(this, "Friend request sent to " + selectedUser.getUsername(), "Success", JOptionPane.INFORMATION_MESSAGE);
                    if (listIndicator != 99) {
                        updateComboBox(ListAccordingToIndicator(listIndicator));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to send friend request. Maybe you're already friends or the request is pending.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a user first.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No users in the list.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        if (jComboBox1.getItemCount() > 0 || (listIndicator == 99 && SearchOutput.getModel().getSize() > 0)) {
            if (listIndicator != 99) {
                selectedUser = getSelectedUser();
            }
            if (selectedUser != null) {
                boolean success = requestHandler.acceptFriendRequest(user, selectedUser);
                if (success) {
                    JOptionPane.showMessageDialog(this, "Friend request from " + selectedUser.getUsername() + " accepted.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    if (listIndicator != 99) {
                        updateComboBox(ListAccordingToIndicator(listIndicator));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to accept the friend request. It might not exist anymore.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a user first.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No friend requests to accept.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void declineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineButtonActionPerformed
        if (jComboBox1.getItemCount() > 0 || (listIndicator == 99 && SearchOutput.getModel().getSize() > 0)) {
            if (listIndicator != 99) {
                selectedUser = getSelectedUser();
            }
            if (selectedUser != null) {
                boolean success = requestHandler.declineFriendRequest(user, selectedUser);
                if (success) {
                    JOptionPane.showMessageDialog(this, "Friend request from " + selectedUser.getUsername() + " declined.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    if (listIndicator != 99) {
                        updateComboBox(ListAccordingToIndicator(listIndicator));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to decline the friend request. It might not exist anymore.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a user first.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No friend requests to decline.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_declineButtonActionPerformed

    private void unFriendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unFriendButtonActionPerformed
        if (jComboBox1.getItemCount() != 0 || (listIndicator == 99 && SearchOutput.getModel().getSize() > 0)) {
            if (listIndicator != 99) {
                selectedUser = getSelectedUser();
            }
            if (selectedUser != null) {
                blockHandler.removeFriend(user, selectedUser);
                JOptionPane.showMessageDialog(this, "You are no longer friends with " + selectedUser.getUsername(), "Success", JOptionPane.INFORMATION_MESSAGE);
                if (listIndicator != 99) {
                    updateComboBox(ListAccordingToIndicator(listIndicator));
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a user first.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No Users in List", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_unFriendButtonActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        // TODO add your handling code here:
        this.listIndicator = 99; // another state 

        this.jScrollPane1.setVisible(true);
        this.SelectedUserTxt.setVisible(true);

        this.searchBar.setVisible(true);
        this.SearchOutput.setVisible(true);
        this.SearchOutput.setListData(new String[0]);
        this.searchBar.setText("");

        this.declineButton.setVisible(false);
        this.jComboBox1.setVisible(false);
        this.status.setVisible(false);
        this.jLabel3.setVisible(false);
        this.blockButton.setVisible(true);
        this.unFriendButton.setVisible(false);

        //using my new added method

    }//GEN-LAST:event_SearchButtonActionPerformed

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_searchBarActionPerformed

    private void searchBarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBarKeyReleased
        // TODO add your handling code here:
        String searchKey = searchBar.getText().trim();
        if (searchKey.isEmpty()) {
            this.SearchOutput.setListData(new String[0]);
            this.addButton.setVisible(false);
            return;
        }

        // get all users to be filtered based on the search key
        ArrayList<User> allUsers = userDatabase.returnAllUsers();
        ArrayList<String> filteredUsers = new ArrayList<>();
        allUsers.remove(this.user);
        // filteration
        for (User user : allUsers) {
            if (user.getUsername().toLowerCase().contains(searchKey.toLowerCase())) {
                filteredUsers.add(user.getUsername());
            }
        }

        //add filtred users 
        this.SearchOutput.setListData(filteredUsers.toArray(new String[0])); //new String[0] is used to specify the type of array

        // if there is one result, you can automatically select it
        if (filteredUsers.size() == 1) {
            searchBar.setText(filteredUsers.get(0)); // Optional: Set the search bar text to the found user
            selectedUser = null;

            for (User user : allUsers) {
                if (user.getUsername().equals(filteredUsers.get(0))) {
                    selectedUser = user;
                    break;
                }
            }

            // Check if the selected user is a friend
            if (selectedUser != null && !friendsManager.areFriends(user.getUserId(), selectedUser.getUserId())) {
                // System.out.println("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk");
                this.addButton.setVisible(true);
            } else {
                // System.out.println("ggggggggggggggggggggggggggggggggggg");
                this.unFriendButton.setVisible(true);
            }

        }

    }//GEN-LAST:event_searchBarKeyReleased

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        prevPage.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_BackActionPerformed

    private void SearchOutputValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_SearchOutputValueChanged
        // TODO add your handling code here:
        String selectedUsername = SearchOutput.getSelectedValue();

        if (selectedUsername != null && !selectedUsername.isEmpty()) {
            // set the search bar text 
            searchBar.setText(selectedUsername);

            ArrayList<User> allUsers = userDatabase.returnAllUsers();
            selectedUser = null;

            for (User user : allUsers) {
                if (user.getUsername().equals(selectedUsername)) {
                    selectedUser = user;
                    break;
                }
            }
            SelectedUserTxt.setText(selectedUser.getUsername());
            // Check if the selected user is a friend
            if (selectedUser != null && !friendsManager.areFriends(user.getUserId(), selectedUser.getUserId())) {
                // System.out.println("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk");
                this.addButton.setVisible(true);
            } else {
                //   System.out.println("ggggggggggggggggggggggggggggggggggg");
                this.unFriendButton.setVisible(true);
            }
        }
    }//GEN-LAST:event_SearchOutputValueChanged

    private User getSelectedUser() {
        String selectedUsername = (String) jComboBox1.getSelectedItem();
        for (Map.Entry<User, String> entry : comboBoxMap.entrySet()) {
            if (entry.getValue().equals(selectedUsername)) {
                return entry.getKey();
            }
        }
        return null; // No match found
    }

    private List<User> ListAccordingToIndicator(int indicator) {
        if (listIndicator == 0) {
            return friendsManager.getFriendsConverted().get(user);
        } else if (listIndicator == 1) {
            return friendsManager.getReceivedRequestsConverted().get(user);
        } else if (listIndicator == 99) {
            return userDatabase.returnAllUsers();

        } else {
            return friendsManager.friendSuggestions(user, allUsers);
        }
    }

    private void updateComboBox(List<User> users) {
        if (users == null) {
            //System.err.println("Error: Cannot update combo box because users is null.");
            return; // Exit early
        }
        if (listIndicator != 99) {
            comboBoxMap.clear();
            jComboBox1.removeAllItems();
            for (User u : users) {
                comboBoxMap.put(u, u.getUsername());
                jComboBox1.addItem(u.getUsername());
            }
        }
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(FriendManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(FriendManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(FriendManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(FriendManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new FriendManagerGUI().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton SearchButton;
    private javax.swing.JList<String> SearchOutput;
    private javax.swing.JLabel SelectedUserTxt;
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton addButton;
    private javax.swing.JButton blockButton;
    private javax.swing.JButton declineButton;
    private javax.swing.JButton friendsButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel profilePic;
    private javax.swing.JButton requestsButton;
    private javax.swing.JTextField searchBar;
    private javax.swing.JLabel status;
    private javax.swing.JButton suggestionsButton;
    private javax.swing.JButton unFriendButton;
    // End of variables declaration//GEN-END:variables
}
